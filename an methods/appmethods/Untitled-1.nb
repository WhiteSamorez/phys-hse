(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    589855,      12602]
NotebookOptionsPosition[    580565,      12455]
NotebookOutlinePosition[    581055,      12473]
CellTagsIndexPosition[    581012,      12470]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "f[x] = ln(1+ x)", Typeset`newq$$ = 
   "f[x] = ln(1+ x)", Typeset`chosen$$ = "f[x] == Log[1 + x]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = True, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "f[x] = ln(1+ x)", 
                  
                  Defer[$CellContext`f[$CellContext`x] == 
                   Log[1 + $CellContext`x]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  RowBox[{"f", "[", "x", "]"}], " ", "==", " ", 
                  RowBox[{"Log", "[", 
                   RowBox[{"1", " ", "+", " ", "x"}], "]"}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  RowBox[{"f", "[", "x", "]"}], " ", "==", " ", 
                  RowBox[{"Log", "[", 
                   RowBox[{"1", " ", "+", " ", "x"}], "]"}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}]}]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "f[x] = ln(1+ x)", 
                    
                    Defer[$CellContext`f[$CellContext`x] == 
                    Log[1 + $CellContext`x]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}]}]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[1]:=",ExpressionUUID->"7c3df53b-9c29-4850-9022-4a2d25310f46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x", "]"}], "\[Equal]", 
  RowBox[{"Log", "[", 
   RowBox[{"1", "+", "x"}], "]"}]}]], "Output",
 CellChangeTimes->{3.88254591682058*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"e2873e9b-3d39-4a9b-ae2f-453770221736"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "g[x] = x/(1+ x/2)", Typeset`newq$$ = 
   "g[x] = x/(1+ x/2)", Typeset`chosen$$ = "g[x] == x/(1 + x/2)", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "g[x] = x/(1+ x/2)", 
                  
                  Defer[$CellContext`g[$CellContext`x] == $CellContext`x/(
                    1 + $CellContext`x/2)], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  RowBox[{"g", "[", "x", "]"}], " ", "==", " ", 
                  RowBox[{"x", "/", 
                   RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  RowBox[{"g", "[", "x", "]"}], " ", "==", " ", 
                  RowBox[{"x", "/", 
                   RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    RowBox[{"g", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}]}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "g[x] = x/(1+ x/2)", 
                    
                    Defer[$CellContext`g[$CellContext`x] == $CellContext`x/(
                    1 + $CellContext`x/2)], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    RowBox[{"g", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    RowBox[{"g", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"g", "[", "x", "]"}], " ", "==", " ", 
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}]}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[2]:=",ExpressionUUID->"9063e0cc-cb7b-444c-8853-058b7b870bfd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "x", "]"}], "\[Equal]", 
  FractionBox["x", 
   RowBox[{"1", "+", 
    FractionBox["x", "2"]}]]}]], "Output",
 CellChangeTimes->{3.882545939604219*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"b3225cb5-e50b-4788-96a6-24e82bc45469"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "plot f[x],g[x]", Typeset`newq$$ = 
   "plot f[x],g[x]", Typeset`chosen$$ = 
   "Plot[Evaluate[{f[x], g[x]}], {x, -6., 6.}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "plot f[x],g[x]", 
                  Defer[
                   Plot[
                    Evaluate[{
                    $CellContext`f[$CellContext`x], 
                    $CellContext`g[$CellContext`x]}], {$CellContext`x, -6., 
                    6.}]], "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], ",", " ", 
                    RowBox[{"g", "[", "x", "]"}]}], "}"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], ",", " ", 
                    RowBox[{"g", "[", "x", "]"}]}], "}"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], ",", " ", 
                    RowBox[{"g", "[", "x", "]"}]}], "}"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "plot f[x],g[x]", 
                    Defer[
                    Plot[
                    Evaluate[{
                    $CellContext`f[$CellContext`x], 
                    $CellContext`g[$CellContext`x]}], {$CellContext`x, -6., 
                    6.}]], "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], ",", " ", 
                    RowBox[{"g", "[", "x", "]"}]}], "}"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], ",", " ", 
                    RowBox[{"g", "[", "x", "]"}]}], "}"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], ",", " ", 
                    RowBox[{"g", "[", "x", "]"}]}], "}"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[3]:=",ExpressionUUID->"6bd2c19e-edaa-4cdc-aa27-ed4ddfb0c757"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6., 6.}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825459809105825`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"5d84dcdb-6e09-4b29-953a-96f19cef64d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "p1 = Plot[ln(1+ x), {x, -10, 10}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Log[1 + x], {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "x"}], ")"}], HoldForm], 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"x", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "10"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TagBox["10", HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Plot", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"arc length is infinite\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plot", "id" -> "Plots", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3540$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3539$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3540$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1847188$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3539$\
1847193$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3540$1847194$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3540$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3539$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1847188$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3539$\
1847193$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3540$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3540$\
1847194$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1847167[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                    Log[1 + $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$], \
-10], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3540$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3540$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$ + 
                    Rational[1, 50], 
                    CalculateUtilities`GraphicsUtilities`Private`max3540$$]], 
                    10]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {330.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3539$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3540$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1847167]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1847167[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1847167[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVtuO0zAQbSn3O/wBEs9IhZXKCxLQZZeVFihJee9s4iQWrh1sZy/\
8PHjsJmm23UoxXUCr9GFUT5rjmTNnpvPsSARJv9frqevGfBQsTm7h6akxYzHPRcHjD6e5JEpRwZNr+\
OyuMSHRu4TBGYmd76Yxe0LOQbvzG3wfWFQw0OSbpoxqStRsX0Ke0UjVnomkx+\
YnMyYiYPQneT58vTMajkYOBmOZgNZEcvWqLWSeSVAk6SHQDWPeM+\
Df3fFJefxcMBaSHwXhEVGPjHcqITYwggPDfLxvvdpM3cfENPAYZHzpNFl5jtteoLSkPJ2SeY5vXEzW\
sC0wyFQ5bh6U3GxSkAv/Nj4QoY3JeWzS9mwJ9AvjitF3Xlb/nLsBnt+\
2hZfiZD1xmN87hryBpsdErdL5onWdHCNV19roF1xd1nzZapAXT5n6f+\
mQKr0axsu2YZD5kanxeu2twu+0hRc5dv1C3A+N+eIcJeC64VAJ7pOIC7aIopnywEm0fboqNw6Hca/\
iO0SnTwUrnMDEWfaL7Y/HFXi9KYRYu9kWpMPrGRCQnBhXbLndpSnV4wwkRAZ4cV2/\
bLKpqEPxuLN97SmPqRlgjpBNyxOag2Sp7qCj7OsfFbeSy7kmQ94PuCYpkRtFfwfrIw25PJ4Kz0hCvK\
CpV28Oq6QmIL1lPyhBwhw4RUj6y3zsN/dwuRJI1b5EdUnH4sCW5tQ/\
iX5Z4EPCU501d2zP0eXdtphNIE5q1QU0SZanzfaY7jeZbtzQHOi+JPiWxH+gd5tCtyn81U1hZQ/\
u1oRuTejWhG5N6NaE/3dNsBHjv9Jvs3K4tg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Real-valued plot", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Real-valued plot", "input" -> 
           "Plots__Real-valued plot"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Complex-valued plot", "input" -> 
           "Plots__Complex-valued plot"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "Plot[ln(1+ x), {x, -10, 10}]", "score" -> "0.8", "level" -> 
        "high"}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[
   True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "3.229", "parsetiming" -> "0.41500000000000004", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1828227ia888346chcf200002e83c600dcafb11h", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "Plot[ln(1+ x), {x, -10, 10}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2023, 1, 13, 0, 1, 21.5133029`9.085282023865098}, "Line" -> 4, 
    "SessionID" -> 22978082090300216910}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "p1 = Plot[ln(1+ x), {x, -10, 10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{341., {85., 31.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[4]:=",ExpressionUUID->"c0e85298-15b4-4fc6-b4ca-900208dac8a2"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      RowBox[{"\<\"(\"\>", "\[NoBreak]", "\<\"arc length is infinite\"\>", 
       "\[NoBreak]", "\<\")\"\>"}],
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100},
      LineColor->GrayLevel[0.6],
      FrontFaceColor->GrayLevel[0.6],
      BackFaceColor->GrayLevel[0.6],
      GraphicsColor->GrayLevel[0.6],
      FontColor->GrayLevel[0.6]],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "p1 = Plot[ln(1+ x), {x, -10, 10}]", {{"Result", 1}, "Content"}]]], "Output",
 CellChangeTimes->{3.882546085428999*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"9e39c882-d344-4183-ab13-c6cd0a2ce282"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "p2 = Plot[x/(1+ x/2), {x, -10, 10}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x/(1 + x/2), {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    FractionBox["x", 
                    RowBox[{"1", "+", 
                    FractionBox["x", "2"]}]], HoldForm], 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"x", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "10"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TagBox["10", HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Plot", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"arc length is infinite\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plot", "id" -> "Plot", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(2 x)/(2 + x), {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5868$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5867$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5868$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1971513$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5867$\
1971518$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5868$1971519$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5868$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5867$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1971513$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5867$\
1971518$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5868$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5868$\
1971519$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1971495[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    2 $CellContext`x/(2 + $CellContext`x), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$], \
-10], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5868$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5868$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$ + 
                    Rational[1, 50], 
                    CalculateUtilities`GraphicsUtilities`Private`max5868$$]], 
                    10]}, ImageSize -> {330.}, PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.5470136627990908, 0.24], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.6, 0.33692049419863584`], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.5939180232054561, 0.6], 
                    AbsoluteThickness[1]]}}, PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    
                    CalculateUtilities`GraphicsUtilities`Private`min5867$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5868$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1971495]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1971495[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1971495[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RnSAEA9Igw7GpAElKe+\
9JU5i4drBdrbBPw8+u0matasU0wGa0odTfWk+33333fUeHYkg6fd6PXXVmA+\
CxckWnh4aMxKzXBQ8fneaS6IUFTy5gs9uGRMSvUcY/CCx81035r2QM9Du/\
BrfBxYVDDT5qimjmhI13ZeQZzRStWcs6bH5yZSJCBj9SR4PX70cvni642AwljFoTSRXz9pC5pkERZI\
eAl0z5i0D/s0dH5THTwVjIfleEB4Rdd94JxJiAyM4MMzH+\
9bLzdQdTEwDj0HGF06Tleeo7QVKS8rTCZnl+Mb5ZA3bAoNMlePmbsnNOgW58G/\
gAxHamJzHJm3PlkC/MC4ZfWdl9c+5G+B5ty28FCericP83jDkDTQ9JmqZziet6+QYqbrWRj/\
n6qLmy0aDPH/K1P9Lh1Tp5TB22oZBZkemxqu1twz/vC28yLHr5+K+\
Z8xn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIzbFd8hOn0qWOEEJs6yX2x/\
bFfg9aYQYu2mG5AOr2dAQHJiXLHldo+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ShbqDjrIvf1TcSi5nmgx5P+\
CapESuFf1NrI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFX7EtUlHYsDW5pT/yT6ZYEPCU911tyxPUeXd9tiNoE4qVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwHxibhm"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "Plot[x/(1 + x/2), {x, -10, 10}]", "score" -> "0.8076923076923077", 
        "level" -> "high"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "4.006", "parsetiming" -> "0.455", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP459419de6g807h82dghg00002c32di88e6ih3c45", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "Plot[x/(1 + x/2), {x, -10, 10}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2023, 1, 13, 0, 1, 56.6659012`9.505896636485243}, "Line" -> 5, 
    "SessionID" -> 22978082090300216910}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "p2 = Plot[x/(1+ x/2), {x, -10, 10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{360., {85., 31.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[5]:=",ExpressionUUID->"1aeb1dc9-1516-4f68-856c-19bd13befd4b"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      RowBox[{"\<\"(\"\>", "\[NoBreak]", "\<\"arc length is infinite\"\>", 
       "\[NoBreak]", "\<\")\"\>"}],
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100},
      LineColor->GrayLevel[0.6],
      FrontFaceColor->GrayLevel[0.6],
      BackFaceColor->GrayLevel[0.6],
      GraphicsColor->GrayLevel[0.6],
      FontColor->GrayLevel[0.6]],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "p2 = Plot[x/(1+ x/2), {x, -10, 10}]", {{"Result", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.882546121575288*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"977e078d-0894-4f41-96fc-c4fdf3d66fa0"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "Show[p1, p2]", Typeset`newq$$ = 
   "Show[p1, p2]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "Show[p1, p2]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[6]:=",ExpressionUUID->"5504a58b-a9bc-452d-97e7-7734b78c7567"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[ln(1+ [x]), {x, -10, 10}]", 
   Typeset`newq$$ = "Plot[ln(1+ [x]), {x, -10, 10}]", Typeset`chosen$$ = 
   "Plot[Log[1 + x], {x, -10, 10}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Plot[ln(1+ [x]), {x, -10, 10}]", 
                  Defer[
                   Plot[
                    Log[1 + $CellContext`x], {$CellContext`x, -10, 10}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Plot[ln(1+ [x]), {x, -10, 10}]", 
                    Defer[
                    Plot[
                    Log[1 + $CellContext`x], {$CellContext`x, -10, 10}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[8]:=",ExpressionUUID->"c7c4fb6b-9b91-4a81-8ce7-9eec4b13090d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
e8v8bJYpgaLHXcRyOYkKGeySETMC/QOcyIts
       "]]},
     Annotation[#, "Charting`Private`Tag$28300#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.5344530335220425`, 2.3978952356926184`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.882546187208129*^9, 3.882546189003446*^9}},
 CellLabel->"Out[8]=",ExpressionUUID->"171e11eb-ab98-4163-b439-5fa9cb06569e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%8", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[9]:=",ExpressionUUID->"ec488e1c-c946-4bc5-b0b9-4a0789bb8d2b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
e8v8bJYpgaLHXcRyOYkKGeySETMC/QOcyIts
       "]]},
     Annotation[#, "Charting`Private`Tag$28300#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Small,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.5344530335220425`, 2.3978952356926184`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.882546200652666*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"eebe09bf-9e58-413e-9b15-f55931299c88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[[x]/(1 + [x]/2), {x, -10, 10}]", 
   Typeset`newq$$ = "Plot[[x]/(1 + [x]/2), {x, -10, 10}]", Typeset`chosen$$ = 
   "Plot[x/(1 + x/2), {x, -10, 10}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Plot[[x]/(1 + [x]/2), {x, -10, 10}]", 
                  Defer[
                   
                   Plot[$CellContext`x/(
                    1 + $CellContext`x/2), {$CellContext`x, -10, 10}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Plot[[x]/(1 + [x]/2), {x, -10, 10}]", 
                    Defer[
                    
                    Plot[$CellContext`x/(
                    1 + $CellContext`x/2), {$CellContext`x, -10, 10}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[11]:=",ExpressionUUID->"6b62feca-4ed0-4d00-90ca-4dc1f2fc4b01"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
       "]], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$31543#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8825462288239093`*^9, 3.8825462477949386`*^9}},
 CellLabel->"Out[11]=",ExpressionUUID->"27b3a8b1-b149-4b76-94df-961bc35bf428"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "Show[p1, p2]", Typeset`newq$$ = 
   "Show[p1, p2]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "Show[p1, p2]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[12]:=",ExpressionUUID->"9a5de613-93a4-4196-a755-80b78dba9af1"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
   Typeset`newq$$ = "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
   Typeset`chosen$$ = "Plot[x/(1 + x/2), {x, -10, 10}]", Typeset`open$$ = 
   False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = True, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
                  Defer[
                   
                   Plot[$CellContext`x/(
                    1 + $CellContext`x/2), {$CellContext`x, -10, 10}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
                    Defer[
                    
                    Plot[$CellContext`x/(
                    1 + $CellContext`x/2), {$CellContext`x, -10, 10}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[14]:=",ExpressionUUID->"b67bcfe6-868f-4b81-a062-bc806c24c3ea"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
       "]], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$35493#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8825463114880266`*^9, 3.8825463379757824`*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"0789eedc-6ce5-4560-b3dc-c3d844d70cdf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
   Typeset`newq$$ = "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
   Typeset`chosen$$ = "Plot[x/(1 + x/2), {x, -10, 10}]", Typeset`open$$ = 
   False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
                  Defer[
                   
                   Plot[$CellContext`x/(
                    1 + $CellContext`x/2), {$CellContext`x, -10, 10}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", 
                    Defer[
                    
                    Plot[$CellContext`x/(
                    1 + $CellContext`x/2), {$CellContext`x, -10, 10}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"x", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{"x", "/", "2"}]}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[22]:=",ExpressionUUID->"125cef4f-d7b6-4719-83a5-653ae9b2567f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
       "]], LineBox[CompressedData["
1:eJwVz3k81PkfB/BpHLkpWVcRoxvZRKjt/RWTlFXRoWOzjWFLhHE0clRLrlSb
M2GRm0gHXfKZchZLK/cxyjGZGauZYcz4hvn5/fF6vB7P/14vA4qfiyeRQCBk
LOf/nXfqWKKmhgAJKP1yih3SDAk5syF+ko9o7jQ/z+PSDPtfv4v9O/jI+IzC
SUMNaUbcMTsTtxo+KikIILzrlmKoeXBTN0bz0WjdtX33TkkxDK/v/qNen49O
tNZMSV0iMuxfD8ovnuAhPTE1lPGEwKgsK7Ru3s1D0U//rXMNJTC0Mv0u3lvP
Q5HVsfQSWwKjRySbdKjrO3pQmzumXCpBG8JOqGXj04ihsJlMlVlC728IlTCH
/1ANy1D5zQ8cpVHifbrU/kNuPX31fTk4umi3ru3CwBTyZerIqJNxpCZDvnXP
dwqdi0tALUnzyD0uRX4smYtgmMqushGjhTvmsjFf2Ci6qK7v9ksh+uTX7KlT
xka00sz5gz5ClH/kTGNlIBvtrPX2HVkvRAdXR0X3yrIRIXrA4nriLMpI7SRu
MZlEgTt8+vb5ziDLrABJaygLef9WM7TahY/8Sx+LV6mPoVB/xyRXYy4yU7kc
te/LKOra6DtX2shBfJqxSmDFKKr7JTiB5c5BtD2lpC6HUZTBOGcvm85GwR0P
ndPCvyJ5+tmpO6qTaIazzdGibQQFyW69T900gYKel5xL8xpBbBUz4qd/xtFc
xIYgEWEEvdmsv14UNI7Eavo5ryyYSNdcxdWvcQwtWK4W/pIzhHLv6uR+uDyK
ZKPEuftp/UifIs8tfD+CYp2Ca4qV+tHFwITbM0YjSO4nQatccR+6s/vt4Stx
TKRQyp37ONiLMuU6pNRdh5FqB9PpMLkHdQvIAzZzA0hLt1F8Uusz2s+yYAYG
9KATXqS8zvAPKPGJ+0175zaUEBAYl1TdgpB0S7nbqVb0Nrzez2W6GekvbaCu
8vqIjJI99na6NyHXpeuv3aNbkADlD/67rx4pc05TFz83ID3zA8YPV71GP+9i
M4uvvEG8+xlUfgYNWQVcaWwuoKFwYkrjfqtTICh/WH7Y/BSYPvBoXmN5DSyb
p3e907wGruZ9tTG2KeC+zT7jrUoKBHhdYjekFMGWpdkZBa0iIBCqJR51L0AR
tf1GeFIDzW39CeauLZBB26nfa9kEF+gDzWe2fYCOU+ace5wmkDMalI6W+gjz
xS/NrLOb4WDYUGTXs1YoSPBYeVLSAm1bRmjBazpAw6dinfqLVrhgR6sY5HTC
TnOtSYewT+CTeyV13aN+MJGJ9d9O6YY9c6JnP2sNANWnqnbuUTcoOdE7ydED
YNfS6XNc1A0VIrrq5bODoGd0gDKU0APTzlfj65SGgZ70h2RTRS+8jKyre2z5
BayljW5fHOkHG5N3T4+kj4FMi29Yo2QYLLp60uo+jEGKaZrtOxsmmIVNXTVe
GIO6YfsdIcFM2PhB007u/Dj4/LTrrjKHCeqelz+jrRPgvKKqX9IxAlNZurOm
dSy4HcGVqWz+AjlKIRbKE2xYYdy0JcpvFB48u6UdpskBTqGet3T8KKSdzluc
dOSAvmjA+OLDUUgsaWtsqOQA1y9HNNw1CnR70olwOhc2r3SqC7UaA5fwTyFc
xf8gaktifh4+BsQQjSGqNg+0Kw8KBy9NwOnfyzpf7uRBR8t+W0nUBDw9CB+U
jvBAL79w78qsCaDoX6x5HsMDuUQN2abWCXjfUvuX9CwPhpl4rdRWFkTpUskF
7XzQNDxqWvSVBdLvnlaORc1A+qtzpOK9k3C23KFwV84MKNy8Mf7UdRKepw5l
3no9AzNrCBdLLkwC1Vs23pw/A9+Ggg4cTZqERvXTHlHnZoH3bXbT3+OTEOO1
QotkLYRBi/M1tjfZsFLpyA3K9Bz8G463J77ggNum0wxLeRGYPnt399UHDpTt
o0oUjEQQ7j2a2zXIAedQesSzUyKoeqmq2yPhQBorN1S6UQQDP87vlHfgwsZ3
/ICiTDEItZNjyZ1cIIckUzgHcFiq57a8GpqCqC89drT8RXBq2UUxapoG5qtD
vvTaRajWYBpmfZ4Gm2RGWmT3Itj3chfkvk4Dj1zGTli5BOkmUjve/5iGc+UR
d/MvLcGxCpbSc7PvYBNiNNhlLoFuNbw49/53mJexfqVLIWCkj4cg1IwHVZkx
RyIFK7BqZZLBDIcHreox31QJRKwhb/eCiMcD1q2bkXnKROwo/KEonuPB2vDo
Rw2bidj2kq4hNpEPcWf/lFN0J2KKVjqcFB0+/L4ukpHeSsT08n7cUHbkg1pO
sNmTAimM8FvgrYqHfPB7SFUbPyGDqeGGMi8cBXAnNCPrjocMFl5queOsswAq
j7RvtvaXwSC7wGbJRQDTS7ts78TLYKJgR47VWQH4nFGkWdXKYE6VzLXxlwXg
vebp50QDWUzh+Js/05ME4BUjSbOYksWu+3vp3OgTwDnvB+tib8hhj//+nmRw
dgbij4ZYm2cpYvHDwm0h+2ZBek0q6xquglWb/uMp1BZCb+tNXrTqKqx8y9G3
rBYhHA+jWD6oX4093zO+1s1vDnwUuYbtp9dgFdGhx6vFc6Bf3pQmy9HAtkes
f78jQARhL+1cVTM1MSvzxj2BLBH4F/nUWG7Xxu6GhClqO4pBibiLYjqhg4nd
uWPcUjGQfY+lbk1ei33bfmvDNsI8aL1a50c20sOSgyzcmxznIYkWd8+sVx9T
G491UUyeB5eYwybZNeux6YXzG2Q752HrmejjBREGGHMxdRZTxKGHJf8w+bgh
pjIQ/KjHHod2yoTtan0SNmVpSm8JweGrdLE41ZCEXfDWr8+5gsNs0YXH2htJ
2DX7J20hdBy0udy1BiYk7MdXk7VGV3GgBgpE23eTsLi45sdhETjgUZKKX0+S
MKrV5nq9aBw2FmrrxN8lYTyGJ9XiHg7WDoOflJJJWKDq2zfSSTg4sbNi/0oj
YXsPHur+vOwAk/XC9GwSVjV49XBACg611Rs/FZWTMLb1Jo/SdBxcmsxjGppJ
GEtyU1/lbxw8Lwj3HGglYSvvaxX3L5uu8GKmtZ2EaRqkCApycMh2tjn/uZuE
NbpVddvk4TDZg+0ZHSNhYxaUDo+C5b104oznt+W9mQahJoU4KOs2lLI5JEyJ
mP1tbtk73B00+XwStrTTTD2+GAfyCvn2ICEJ01EK/3S0BAe3/I/RYjEJW4Nz
XXRKcfAmJ+4OX1j+w8x4MLrsiG+/CiQSEtYQl1NcVobD/wBv8ONS
       "]]},
     Annotation[#, "Charting`Private`Tag$45640#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825463614874153`*^9, 3.8825466359962926`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"a37c5e6f-73af-4e37-941e-117c310f9834"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "p = Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]",
    Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x/(1 + x/2), {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    FractionBox["x", 
                    RowBox[{"1", "+", 
                    FractionBox["x", "2"]}]], HoldForm], 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"x", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "10"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TagBox["10", HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Plot", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"arc length is infinite\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plot", "id" -> "Plot", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(2 x)/(2 + x), {x, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5882$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5881$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5882$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1516717$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5881$\
1516722$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5882$1516723$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5882$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5881$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1516717$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5881$\
1516722$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5882$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5882$\
1516723$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1516699[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    2 $CellContext`x/(2 + $CellContext`x), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$], \
-10], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5882$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5882$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$ + 
                    Rational[1, 50], 
                    CalculateUtilities`GraphicsUtilities`Private`max5882$$]], 
                    10]}, ImageSize -> {330.}, PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.5470136627990908, 0.24], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.6, 0.33692049419863584`], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.5939180232054561, 0.6], 
                    AbsoluteThickness[1]]}}, PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    
                    CalculateUtilities`GraphicsUtilities`Private`min5881$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5882$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1516699]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1516699[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1516699[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3hn8AyQ+I8rL+\
IQ06GBMGlCS8r23xEksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96jIxEk/\
V6vp64a80GwONnC00NjRmKWi4LH705zSZSigidX8NktY0Ki9wiDHyR2vuvGvBdyBtqdX+\
P7wKKCgSZfNWVUU6Km+xLyjEaq9owlPTY/mTIRAaM/yePhy+\
HOq6c7DgZjGYPWRHL1vC1knklQJOkh0DVj3jLg39zxQXn8VDAWku8F4RFR9413IiE2MIIDw3y8b73c\
TN3BxDTwGGR84TRZeY7aXqC0pDydkFmOb5xP1rAtMMhUOW7ultysU5AL/wY+\
EKGNyXls0vZsCfQL45LRd1ZW/5y7AZ5328JLcbKaOMzvDUPeQNNjopbpfNK6To6Rqmtt9HOuLmq+\
bDTI86dM/b90SJVeDuNZ2zDI7MjUeLX2luFftIUXOXb9XNz3jPnsHCXgquFQCe6jiAs2j6KZ8sBJtH\
26KjcOh3G74jtEp08FK5zAxFn2i+2P7Qq83hRCrN10A9Lh9QwISE6MK7bc7tGU6lEGEiIDPL+\
uXzbZRNSheNzZvvaUx9QMMEfIuuUJzUGyUHfQUfblj4pbyeVMkyHvB1yTlMi1or+\
J9ZGGXB5PhGckIV7Q1Ks3h1VSY5Desh+UIGEOnCIk/WU+9pt7uFgJpGpforqkY3FgS3Pqn0S/\
LPAh4anOmju25+jyblvMJhAnteoCmiSL02ZzTPebTDduaA50XxJ8S+I/0LtNodsU/\
uqmsLQHd2tCtyZ0a0K3JnRrwv+7JtiI8V/pN2qTuG4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", "score" -> "0.84", "level" -> 
        "high"}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[
   True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "4.204", "parsetiming" -> "0.461", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP38281c8e2083e1c48924000055ef91e6idg0d62c", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> "", 
    "version" -> "2.6", "inputstring" -> 
    "Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2023, 1, 13, 0, 6, 10.0994084`8.756870896445468}, "Line" -> 16,
     "SessionID" -> 22978082090300216910}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "p = Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{394., {85., 31.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[16]:=",ExpressionUUID->"55386cb0-977d-4f0a-b6f6-506a39729801"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "p = Plot[ [x]/(1 + [x]/2) , {x, -10, 10}]", {{"Result", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.882546375132386*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"ee9252af-39b6-4705-91c7-6f86474be0e2"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[ [x]/(1 + [x]/2) , {x, -10, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[ [x]/(1 + [x]/2) , {x, -10, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[ [x]/(1 + [x]/2) , {x, -10, 10}, PlotStyle -> \
Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[17]:=",ExpressionUUID->"43a4d478-dc0a-4db1-a6b9-ebf282bf039e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "Show[p1,p2]", Typeset`newq$$ = 
   "Show[p1,p2]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "Show[p1,p2]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[18]:=",ExpressionUUID->"6b300d0a-92a6-49de-abc0-6339cba43b98"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "Show[p1, p2]", Typeset`newq$$ = 
   "Show[p1, p2]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "Show[p1, p2]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[19]:=",ExpressionUUID->"6eaa48e5-3270-45b3-a425-8a895d047493"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[ [x]/(1 + [x]/2) , {x, -3, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[ [x]/(1 + [x]/2) , {x, -3, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[ [x]/(1 + [x]/2) , {x, -3, 10}, PlotStyle -> \
Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[20]:=",ExpressionUUID->"a644f8a9-530b-4b3c-853d-26c741664b76"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[ [x]/(1 + [x]/2) , {x, 0, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[ [x]/(1 + [x]/2) , {x, 0, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[ [x]/(1 + [x]/2) , {x, 0, 10}, PlotStyle -> \
Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[21]:=",ExpressionUUID->"0dff8c4c-1abb-4a3d-8dec-9b5be7f6aee5"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[ x/(1 + x/2) , {x, 0, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[ x/(1 + x/2) , {x, 0, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[ x/(1 + x/2) , {x, 0, 10}, PlotStyle -> Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[23]:=",ExpressionUUID->"0154744b-f2a1-4077-ba21-4fa3a90beab2"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[ {x/(1 + x/2)} , {x, 0, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[ {x/(1 + x/2)} , {x, 0, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[ {x/(1 + x/2)} , {x, 0, 10}, PlotStyle -> Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[24]:=",ExpressionUUID->"4e7b475b-dab4-46b7-9883-2fb9162960fc"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p3 = Plot[ x/(1 + x/2) , {x, 0, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p3 = Plot[ x/(1 + x/2) , {x, 0, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p3 = Plot[ x/(1 + x/2) , {x, 0, 10}, PlotStyle -> Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[25]:=",ExpressionUUID->"d1e97420-8286-44d1-b63b-c454e2a05f9b"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot[{ln(1+ [x]), x/(1 + x/2)}, {x, -10, 10}, PlotLabel -> \"Plots\"]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plot", 1, 1, "Input", "Plot[x^2, {x, -1.2, 1.2}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    SuperscriptBox["x", "2"], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x^2, {x, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6743$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6742$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6743$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3480394$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6742$\
3480399$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6743$3480400$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6743$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6742$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3480394$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6742$\
3480399$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6743$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6743$\
3480400$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3480371[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][$CellContext`x^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$], \
-1.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6743$$]], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min6742$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6743$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$ + 
                    0.0024, 
                    CalculateUtilities`GraphicsUtilities`Private`max6743$$]], 
                    1.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {330.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6742$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6743$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3480371]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3480371[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3480371[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/\
gMQzArqHvSABHYxJA0pS3uvFl9TCtYPtbIN/Hnx2kzRrVymmAzSlD6f60ny+++676z05klHa7/V6+\
qo1HySn6Q08PbZmJOe5LAR9d5or0JpJkV7BZ7eticHsASc/\
gHrfdWveSzUnxp9f4fuEJwUnBr4axplhoKf7iuQzlujaM1bs2P5kymVCOPsJT4c7u8+\
Hu0MPg7GMiTGghB62hcxnimhIewh0zZq3nIhv/vioPH4qOI/hewEiAf3AeieKUAsjBeGYT/\
Ctl5upu5iYIYISRS+cJifPUdsLtFFMZBOY5/jG+WS9aAtMVKY9N/dKbjYpyId/Ex/\
I2MXkPS5pd3YEhoVxyeg7K6t/zt0Az6/bwit5sp44zO8NR96IYcegV+\
l81rpOnpGqa130C64uar5sNcjzp0z9v3TItFkN42XbMGB+\
ZGu8Xnur8Dtt4WWOXb8Q931rPntHCbhuOFSC+yhpwRdRNFMeeIm2T1fn1uEx7lR8x+\
gMqWCFE9k4y35x/\
fGwAq83hRhrN92CdEQ9AyLIwbqo43aPZcyMZkSRxAIvruuXTTaRdSgBd7avPROU2QHmCdm0PKE5SJf\
qTkwy+/JHxa3kcqbJkPcDYSADtVH0t7A+ypIr6EQGRhLjBU29BnNYJTUmKlj2gxIkzolgCMl+2Y/\
75h8uVwKp2leoLuVZHLjSnIYn0S8LfAgiM7Pmjh04uoLbFrOJ5Emtuoil6fK02R7T/\
SbTjRuaAz2UhNCShA/0blPoNoW/uims7MHdmtCtCd2a0K0J3Zrw/64JLmL8V/oN2HO4hg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "4"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "plot", "template" -> 
        "Assuming \"plot\" refers to a computation${separator}Use as ${desc} \
or ${desc} or ${desc} or ${desc} instead", "count" -> "5", "pulldown" -> 
        "false", "default" -> 
        "{\"C\", \"plot\"} -> {\"Calculator\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Calculator", "desc" -> "a computation", "input" -> 
          "{\"C\", \"plot\"} -> {\"Calculator\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MathWorld", "desc" -> 
          " referring to a mathematical definition", "input" -> 
          "{\"C\", \"plot\"} -> {\"MathWorld\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"C\", \"plot\"} -> {\"ExamplePage\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "{\"C\", \"plot\"} -> {\"Word\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Book", "desc" -> "a book", "input" -> 
          "{\"C\", \"plot\"} -> {\"Book\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaSelect", "template" -> 
        "Assuming plot calculator${separator}Use ${desc} or ${desc} instead", 
        "count" -> "3", "pulldown" -> "false", "default" -> 
        "\"FSelect\" -> {{\"Plot\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Plot", "desc" -> "plot calculator", "input" -> 
          "\"FSelect\" -> {{\"Plot\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "LogPlotCalculator", "desc" -> 
          "logarithmic scale calculator", "input" -> 
          "\"FSelect\" -> {{\"LogPlotCalculator\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "3DPlot", "desc" -> "3d plot calculator", "input" -> 
          "\"FSelect\" -> {{\"3DPlot\"}}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "template" -> "function to plot:${field}",
         "count" -> "1", "pulldown" -> "false", "current" -> "1", "default" -> 
        "{\"F\", \"Plot\", \"plotfunction\"} -> \"x^2\""}, {
        XMLElement[
        "value", {
         "valid" -> "true", "name" -> "Plot.plotfunction", "desc" -> "x^2", 
          "input" -> "{\"F\", \"Plot\", \"plotfunction\"} -> \"x^2\""}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableInclude", "template" -> 
        "Also include: ${desc}${separator}${desc}", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"FVarOpt\", \"1\"} -> {{}, {{{\"Plot\", \"plotvariable\"}, {\"Plot\
\", \"plotlowerrange\"}, {\"Plot\", \"plotupperrange\"}}, {{\"Plot\", \
\"ymin\"}, {\"Plot\", \"ymax\"}}}, {}}"}, {
        XMLElement[
        "value", {
         "name" -> 
          "Plot.plotvariable,Plot.plotlowerrange,Plot.plotupperrange", "desc" -> 
          "variable range", "input" -> 
          "{\"FVarOpt\"} -> {{\"Plot\", \"plotvariable\"}, {\"Plot\", \
\"plotlowerrange\"}, {\"Plot\", \"plotupperrange\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Plot.ymin,Plot.ymax", "desc" -> "y-axis range", "input" -> 
          "{\"FVarOpt\"} -> {{\"Plot\", \"ymin\"}, {\"Plot\", \"ymax\"}}"}, \
{}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "plot", "score" -> "0.05970149253731343", "level" -> "low"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "5.38", "parsetiming" -> "0.145", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP19571h58if6aace1029100002131g52393g53332", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "plot"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2023, 1, 13, 0, 16, 34.2610317`9.287375333129054}, "Line" -> 
    26, "SessionID" -> 22978082090300216910}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Input", "Plot[x^2, {x, -1.2, 1.2}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "Plot[{ln(1+ [x]), x/(1 + x/2)}, {x, -10, 10}, PlotLabel -> \"Plots\"]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{586., {116., 31.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[26]:=",ExpressionUUID->"a1570b18-a832-4dca-b00f-1526c04db5a9"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
agGnv5pt3cOyhP/7Ifj/H/I/2CCvXg==
       "]]},
     Annotation[#, "Charting`Private`Tag$50675#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.2, 1.2}, {0., 1.4399998824489817`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.882546994418433*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"c2a1614e-adf5-4dd0-aa17-d136d0c597b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot[{Log(1+ [x]), [x]/(1 + [x]/2)}, {x, -10, 10}, PlotLabel -> \
\"Plots\"]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plot", 1, 1, "Input", "Plot[x^2, {x, -1.2, 1.2}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    SuperscriptBox["x", "2"], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x^2, {x, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max18227$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min18226$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max18227$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2031602$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min18226$\
2031607$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max18227$\
2031608$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max18227$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min18226$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2031602$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min18226$\
2031607$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max18227$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max18227$\
2031608$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2031579[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][$CellContext`x^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$], \
-1.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max18227$$]], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max18227$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$ + 
                    0.0024, 
                    CalculateUtilities`GraphicsUtilities`Private`max18227$$]],
                     1.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {330.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min18226$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max18227$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2031579]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2031579[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2031579[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/\
6D5B4RnSDBx6QGN0YkwaUpLz3ljiJhWsH29kG/zz47CZp1q5STAdoSh9O9aX5fPfdd9d7eiyCpN/\
r9dR1Yz4IFidbeHpizEjMclHweP8sl0QpKnhyDZ/dMSYkeo8w+EFi57tpzHshZ6Dd+Q2+\
DywqGGjyVVNGNSVqeiAhz2ikas9Y0hPzkykTETD6kzzbfrEzfPV66GAwljFoTSRXO20h80yCIkkPgW\
4Y844B/+aOj8vjp4KxkHwvCI+\
Iemi8EwmxgREcGObjfevVZuoeJqaBxyDjS6fJynPU9gKlJeXphMxyfONisoZtgUGmynFzv+RmnYJc+\
LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyBpqeELVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+lI6r0chjbbcMgs2NT49XaW4Z/2RZe5Nj1c3E/\
MOazc5SAq4ZDJbiPIi7YPIpmygMn0fbpqtw4HMbdiu8QnT4VrHACE2fZL7Y/\
HlXg9aYQYu2mG5AOr2dAQHJiXLHldo+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ThbqDjrIvf1TcSi7nmgx5P+\
SapESuFf1trI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFUHEtUlHYsDW5oz/yT6ZYGPCE911tyxPUeXd9tiNoE4rVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwEI/rhG"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "4"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "plot", "template" -> 
        "Assuming \"plot\" refers to a computation${separator}Use as ${desc} \
or ${desc} or ${desc} or ${desc} instead", "count" -> "5", "pulldown" -> 
        "false", "default" -> 
        "{\"C\", \"plot\"} -> {\"Calculator\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Calculator", "desc" -> "a computation", "input" -> 
          "{\"C\", \"plot\"} -> {\"Calculator\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MathWorld", "desc" -> 
          " referring to a mathematical definition", "input" -> 
          "{\"C\", \"plot\"} -> {\"MathWorld\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"C\", \"plot\"} -> {\"ExamplePage\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "{\"C\", \"plot\"} -> {\"Word\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Book", "desc" -> "a book", "input" -> 
          "{\"C\", \"plot\"} -> {\"Book\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaSelect", "template" -> 
        "Assuming plot calculator${separator}Use ${desc} or ${desc} instead", 
        "count" -> "3", "pulldown" -> "false", "default" -> 
        "\"FSelect\" -> {{\"Plot\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Plot", "desc" -> "plot calculator", "input" -> 
          "\"FSelect\" -> {{\"Plot\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "LogPlotCalculator", "desc" -> 
          "logarithmic scale calculator", "input" -> 
          "\"FSelect\" -> {{\"LogPlotCalculator\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "3DPlot", "desc" -> "3d plot calculator", "input" -> 
          "\"FSelect\" -> {{\"3DPlot\"}}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "template" -> "function to plot:${field}",
         "count" -> "1", "pulldown" -> "false", "current" -> "1", "default" -> 
        "{\"F\", \"Plot\", \"plotfunction\"} -> \"x^2\""}, {
        XMLElement[
        "value", {
         "valid" -> "true", "name" -> "Plot.plotfunction", "desc" -> "x^2", 
          "input" -> "{\"F\", \"Plot\", \"plotfunction\"} -> \"x^2\""}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableInclude", "template" -> 
        "Also include: ${desc}${separator}${desc}", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"FVarOpt\", \"1\"} -> {{}, {{{\"Plot\", \"plotvariable\"}, {\"Plot\
\", \"plotlowerrange\"}, {\"Plot\", \"plotupperrange\"}}, {{\"Plot\", \
\"ymin\"}, {\"Plot\", \"ymax\"}}}, {}}"}, {
        XMLElement[
        "value", {
         "name" -> 
          "Plot.plotvariable,Plot.plotlowerrange,Plot.plotupperrange", "desc" -> 
          "variable range", "input" -> 
          "{\"FVarOpt\"} -> {{\"Plot\", \"plotvariable\"}, {\"Plot\", \
\"plotlowerrange\"}, {\"Plot\", \"plotupperrange\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Plot.ymin,Plot.ymax", "desc" -> "y-axis range", "input" -> 
          "{\"FVarOpt\"} -> {{\"Plot\", \"ymin\"}, {\"Plot\", \"ymax\"}}"}, \
{}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "plot", "score" -> "0.05555555555555555", "level" -> "low"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "5.519", "parsetiming" -> "0.15", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP520511g8gfe9af4fi32f0000418e886c99fe55a0", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "plot"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2023, 1, 13, 0, 17, 21.8873306`9.092767729704573}, "Line" -> 
    27, "SessionID" -> 22978082090300216910}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Input", "Plot[x^2, {x, -1.2, 1.2}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "Plot[{Log(1+ [x]), [x]/(1 + [x]/2)}, {x, -10, 10}, PlotLabel -> \
\"Plots\"]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{624., {116., 31.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[27]:=",ExpressionUUID->"85f7c5bf-b8a2-4069-8df0-6ad33c03a950"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
agGnv5pt3cOyhP/7Ifj/H/I/2CCvXg==
       "]]},
     Annotation[#, "Charting`Private`Tag$52290#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.2, 1.2}, {0., 1.4399998824489817`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825470420105653`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"58838e4d-6969-4f38-aa50-fbe652630dad"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[ {x/(1 + x/2)} , {x, -10, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[ {x/(1 + x/2)} , {x, -10, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[ {x/(1 + x/2)} , {x, -10, 10}, PlotStyle -> \
Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[28]:=",ExpressionUUID->"95e8f157-f94f-4835-89a9-a6e388312c5c"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "p2 = Plot[{x/(1 + x/2)}, {x, -10, 10}, PlotStyle -> Magenta]", 
   Typeset`newq$$ = 
   "p2 = Plot[{x/(1 + x/2)}, {x, -10, 10}, PlotStyle -> Magenta]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm], 
            ImageSizeCache -> {173.13750687986612`, {4., 11.}}], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{24., {8., 16.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "p2 = Plot[{x/(1 + x/2)}, {x, -10, 10}, PlotStyle -> Magenta]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[29]:=",ExpressionUUID->"1521ed11-06bb-4fe7-9c49-6ffdff4118b6"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.882547203267042*^9, 
  3.882547208374323*^9}},ExpressionUUID->"12c27e2f-3a68-40c6-bdaf-\
967e42286d1d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p2", " ", "=", " ", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", "/", 
       RowBox[{"(", 
        RowBox[{"1", " ", "+", " ", 
         RowBox[{"x", "/", "2"}]}], ")"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{"-", "10"}], ",", " ", "10"}], "}"}], ",", " ", 
     RowBox[{"PlotStyle", " ", "->", " ", "Magenta"}]}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8825472704568467`*^9, 3.882547273848623*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"a59ddd6a-b3e2-44e5-8eeb-a21a8837fb65"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[1, 0, 1], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
       "]], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$55496#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825472970038924`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"82ae0b1e-3ae1-4cd5-bd2c-13d108111fd6"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8825473055456696`*^9, 
  3.8825473104520717`*^9}},ExpressionUUID->"c371e44e-2b35-4650-87da-\
971c54273d60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"p1", ",", "p2"}], "]"}]], "Input",
 CellChangeTimes->{{3.882547320128373*^9, 3.8825473270993986`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"d7ccf508-90dd-4d94-b55b-01ef6d604570"],

Cell[BoxData[
 TemplateBox[{
  "Show", "gcomb", 
   "\"Could not combine the graphics objects in \
\\!\\(\\*RowBox[{\\\"Show\\\", \\\"[\\\", RowBox[{\\\"p1\\\", \\\",\\\", \
GraphicsBox[List[List[List[List[], List[], \
TagBox[List[Directive[Skeleton[3]], LineBox[Skeleton[1]], \
LineBox[Skeleton[1]]], Function[Annotation[Slot[1], \
\\\"Charting`Private`Tag$55496#1\\\"]]], List[]]], List[]], \
List[Rule[DisplayFunction, Identity], Rule[Ticks, List[Automatic, \
Automatic]], Rule[AxesOrigin, List[0, 0]], Rule[FrameTicks, \
List[List[Automatic, Automatic], List[Automatic, Automatic]]], \
Rule[GridLines, List[None, None]], Rule[DisplayFunction, Identity], \
Rule[PlotRangePadding, List[List[Scaled[0.02`], Scaled[0.02`]], \
List[Scaled[0.05`], Scaled[0.05`]]]], Rule[PlotRangeClipping, True], \
Rule[ImagePadding, All], Rule[DisplayFunction, Identity], Skeleton[15]]]}], \
\\\"]\\\"}]\\).\"", 2, 31, 1, 22978082090300216910, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.882547333462623*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"a2eec8da-6abf-40a1-9934-e2250d2b8fa4"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"p1", ",", 
   GraphicsBox[{{{}, {}, 
      TagBox[
       {RGBColor[1, 0, 1], AbsoluteThickness[1.6], Opacity[1.], 
        LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
         "]], LineBox[CompressedData["
1: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
         "]]},
       Annotation[#, "Charting`Private`Tag$55496#1"]& ], {}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "]"}]], "Output",
 CellChangeTimes->{3.8825473334912386`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"22e6fda7-f323-4ab7-84bb-e5afa072a051"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p1", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"ln", 
     RowBox[{"(", 
      RowBox[{"1", "+", " ", "x"}], ")"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.88254733849047*^9, 3.8825473481166754`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"71d7e1c2-1f1c-4c9e-ab05-0d0ee1d5e115"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.882547352537861*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"9a655523-24b1-41f5-8f72-5bf810ebb515"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.882547371658377*^9, 3.8825473778729963`*^9}, 
   3.882547450180379*^9},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"1d3345e5-8741-45e1-b5b8-918995e12c84"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"p1", ",", "p2"}], "]"}]], "Input",
 CellChangeTimes->{{3.8825474003009815`*^9, 3.8825474053714275`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"fd60e5f1-26cf-48d6-a654-02fdfacd99ae"],

Cell[BoxData[
 GraphicsBox[{{{}, {}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 1], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
        "]], LineBox[CompressedData["
1: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
        "]]},
      Annotation[#, "Charting`Private`Tag$55496#1"]& ], {}}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{362.6785714285718, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.882547412163168*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"1ff50ed2-9324-479c-9b47-163e9c3eb51c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"ln", 
     RowBox[{"(", 
      RowBox[{"1", "+", " ", 
       RowBox[{"[", "x", "]"}]}], ")"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8825474544684377`*^9, 3.8825474554063015`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[34]:=",ExpressionUUID->"c714cccc-9932-4ac4-9e7f-d7043c347147"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"ln", 
    RowBox[{"(", 
     RowBox[{"1", "+", " ", 
      RowBox[{"[", "x", "]"}]}], ")"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.882547470712731*^9, 3.8825474728033295`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[34]:=",ExpressionUUID->"cba32068-dfbe-49b3-8d61-ee63b2dd3e95"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"ln", 
     RowBox[{"(", 
      RowBox[{"1", "+", "x"}], ")"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}], ",", 
    RowBox[{"PlotStyle", " ", "->", " ", "Red"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.882547484682963*^9, 3.8825475266946945`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"ff9b6a03-9363-49ee-a01f-d5a0de7d428d"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825474988808737`*^9, 3.8825475303773723`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"c29c5746-1140-49e6-a290-5f080a5ba7da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[ln(1+ [x]), {x, -10, 10}]", 
   Typeset`newq$$ = "Plot[ln(1+ [x]), {x, -10, 10}]", Typeset`chosen$$ = 
   "Plot[Log[1 + x], {x, -10, 10}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Plot[ln(1+ [x]), {x, -10, 10}]", 
                  Defer[
                   Plot[
                    Log[1 + $CellContext`x], {$CellContext`x, -10, 10}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Plot[ln(1+ [x]), {x, -10, 10}]", 
                    Defer[
                    Plot[
                    Log[1 + $CellContext`x], {$CellContext`x, -10, 10}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[36]:=",ExpressionUUID->"995c59c8-ef2f-413a-a792-e3af8aca6d05"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
e8v8bJYpgaLHXcRyOYkKGeySETMC/QOcyIts
       "]]},
     Annotation[#, "Charting`Private`Tag$58945#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.5344530335220425`, 2.3978952356926184`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825475651218596`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"f1e7d812-585d-41ba-a1bf-b52f23aeaa60"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"ln", 
    RowBox[{"(", 
     RowBox[{"1", "+", " ", 
      RowBox[{"[", "x", "]"}]}], ")"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.882547567482323*^9, 3.882547567482323*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[37]:=",ExpressionUUID->"ea22b414-69b7-4765-b031-aefb463ae363"],

Cell[BoxData[
 RowBox[{"p1", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"ln", 
     RowBox[{"(", 
      RowBox[{"1", "+", " ", 
       RowBox[{"[", "x", "]"}]}], ")"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.88254760575359*^9, 3.882547614741884*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[37]:=",ExpressionUUID->"8b18d580-a079-455e-b1e2-bac63633f607"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"p1", ",", "p2"}], "]"}]], "Input",
 CellChangeTimes->{{3.882547619014825*^9, 3.8825476251572685`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"65cb29b1-8657-490f-ac86-99d3d0f890fe"],

Cell[BoxData[
 GraphicsBox[{{{}, {}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 1], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwVkmk0FooahQ3fPI/4JEMfZShDyVDJi1AdmeMWIa7qIkQH4SANhBKpJJWQ
uZISKXmLFAnHUCFDOknpyGkyc7o/9trrWWuv59dW8Q5y9JWSkJCI/5X/9x8f
tn1dXBSj6vEAaQkJAoxEyfzomxPjxVBDzaZfbMsZnKyaFqPpsFxOuiQBlI2D
54O+iVGk1HtouTQBHielU4ZGxLhdO/KTA4kAFO1XivhCjJo/nn+sYhAg46DX
b3EXxXiP6Vf5SESAUsnQfAlDMUa7M0pe6ROA6Gu9WrRrGc4r9Y0WHiQA//WT
gNw0FVSeuj8WXkUAx/osH41mZWRZHqVTJIkQ9cUk4PQ7JYzeP3PihhsRqsOz
/G7aKWLVsbnasgdEsE3frrxwQQHlbhgVpxqQwPpSre3mz/LYcDLxfkE9CSZO
vpkjjMjjl738rL+ekCArZrbk0aA8VjRH/BA/I8FnT2Py+k55HLhWr17YQoL0
ZZV1q2rksd7BvbSumwQDhWW6/ER53GXgEr5ulARhFRd5A+JfviQzO28WGQqe
HnoZ6ibCrrdVN/s8yXBhdZhFsbMIJcOph+q8yZByKaR8YJsIaTXUhGu+ZAgJ
9U/aAiLUjXwRFeFPBhOlXRuV1ETIH3UQrAsnQ1cYFDSPyyEnWBiknUoGqeXk
MJV4OVS/laIxgWTwOJohbCuSRT8by9XJKynQavqTHJEri58YROzToYDprOuM
crYsimzYi9prKKAcsmQwJFUWVf5YdbnfmALDnrlFMmGyCOEjtW7WFNizvny9
h4UsMjPV4ga8KRD49fnuv/tl0Jd0SF02mwIxXtI36HwZlJMYWlwtR4XyNutT
XQwZbOR2jRkpUGF4Y0rgJZIMSp9J22euTAWrpUIdnRkhjmUGrfBSpwKrd3m5
41shJtfWmz01osJlp60VF24Kscn7s8nmnVSos0q7u8JGiPubzd4Z51Dha2X3
uQlLIcbpqTXfz6eCqpp8+D1TIZ52Lh0zK6ZConSe4W9rhEjrPfpzZwUV7PFO
daC8EB9+0OzGBioMGb+uqRwV4OSOeM3dn6ggsUqpzuKYACFKvHuZMQ2iZcw8
jsUI8E7j3h8FG2kwueg93xguQLsCPKy3iQbjHQXrt/oJkO+VWfwfOxr0RWhX
29v92jPebZ3wpcHdBpNbu0QCtDjv2bAtgwb73d3zwq/zcaCi7m/mTxqMWsaY
3yvgo42uJ3PPHA3+q5PzduYKH08RHE48kaLDTqm/lGLS+Rh9Lb8pi02HzUX+
2UfD+ViVM917RYMOqt8jz6aZ8THqZ5eisicdepMvJJR28/BkuyrDs50OnU+U
y7zaeLjJZm+s6Ss6tCwWtgubePj+eevUigE6PAy9K4p7wMOzt6MMuJ/pkOvW
Weqcx8OAQ7lBVhQG+Gkx2+eDeagkDOvfbM6A2eY4OXsGDy8ELQ9cWsuA7wSK
CZHEQ6cr1fkKTxgwvjF1d80iF/2Svo6pvWDAUMWlEtVvXGzvrJty6WdAQ1bN
hukeLt4WK6xau8CAFL/vXrmFXBT+dKn4ZsYEBdq+4u/mXKw0fLDI7WCCx8OW
lGUbuBjbStOwfsOEqyF6wfZruai+J/NA8ggTlvfNGJSt4KIzJe+D2SwTdMpO
NvgwuMi2WKbrp8YCc9vbgx3dHEwcrXj5NJoF/0tfEN7ax8GYkeGiFiM2lFn5
TA/s5uDk9a9HdCzZMD7z9A3DjYOUiPrzBQ5sCPFJy9u3jYPJ8tJ6HX5siNZX
1VNezUHZ4sePVC+zQfH6mUzFSTa2HpvTCiVwwH+tJrFPgY2HJy9GmURwIIR4
rzCMzcZrNiMJT2I5ENltvZUnxcb5Bi7RLYEDSb/7pm75wMIrprPDN85xoKQy
R1R9i4WdtgmwUMmBj2tltc9asfBqe/vorkkOTBAL2nWNWXjqsMTStkUOTHXr
h7ZosVBLPGNpT+ECJcyxWprLQt3UcyuPiLigfvekeUgfE50MmEHlG7iw14Dg
ahfMxED9Ngvn41wIJJ2Z/uTNRMfE0it9qVwIe6mSfXw7E2vmDyqFXeDC8TDT
t7XrmNjDdgh9X8aFgruR/iuJTHzvSZu73cWF9wb/xFKzGFhhYbR9szoPfAwH
iurr6ei34Xuj9Vse7CkydLGqouMfpfnTQ5954CdKk24qoaM+0UnyzBQPgmct
PFrT6PiPneuf5hw+RNcV83s86bjHTPpkL/Ahw/r3mPFZGlYl+AuMCvlwvrpV
68AXGlY0lNsk3OFDloZ6z7dhGh7e3cr68YgPOfS+NdNNNDwianm9qp8P19vg
o3QmDTmdzUnKQgE0ujKcRfo0NK0wPXYgWQBNz3wls1fQUHlix87BLAG0GNfd
UFxCw3TY4RhaIoCOJSFUVSkaBtctHWE3C2Bw8NVD7XYqaj9z69GiC2Fqb57G
pgAqBtQt+RR5Vgizr+deNnpS0ZRjuySjUAgLW1yObnGiImuL8Gn/PSEQVlIH
bddRMc+8/ipxUAjcicCMHRQqxrv599RqyYBmxLrFwHwKPs70MTzTJgPYb6v5
7hwFo58v9oyPyICLhc921xMUPNWz7XLGggzEs1JKTQMpmOztptKgLQs9+f2u
HCMKjiUINN+ky0Lin3Hlt56TcSR20/Gd/nKgaHi2T+0hGSNS9uwXJMrBnexi
UlY5GQfee51Yc00OhvZ2uMefJf/6q0JP8ZAcGC6IqU6eZDxjb3m60l0EqTvo
sRumSBil1KVn5SEP/wI/M5fs
        "]], LineBox[CompressedData["
1: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
        "]]},
      Annotation[#, "Charting`Private`Tag$55496#1"]& ], {}}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825476288955364`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"299ad0b8-e6ef-440e-830e-06bfd709c45c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ln", 
       RowBox[{"(", 
        RowBox[{"1", "+", " ", "x"}], ")"}]}], ",", " ", 
      RowBox[{"x", "/", 
       RowBox[{"(", 
        RowBox[{"1", " ", "+", " ", 
         RowBox[{"x", "/", "2"}]}], ")"}]}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8825476431301727`*^9, 3.882547675936759*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"30fb7a17-4ff7-41a0-968e-15592dad9fde"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, {}, 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
sRumSBil1KVn5SEP/wI/M5fs
       "]], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$59593#2"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825476797503943`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"ad4c63c6-bfa1-41fe-8a29-75a54b3d3959"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p1", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"ln", 
     RowBox[{"(", 
      RowBox[{"1", "+", " ", "x"}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8825476881424103`*^9, 3.882547710709449*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"2d00cdfa-1baa-437c-849f-75d20258ef77"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.882547695805828*^9, 3.882547718706526*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"d4041899-4b8e-49a7-9148-ac78589d1b55"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plot[ln(1+ x), {x, -10, 10}]", "WolframAlphaShort",ExpressionUUID->"c7a606e4-4d5d-4be6-834e-1ad9cc4dfb3f"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "p1 = Plot[ln(1+ x),{x, -10, 10}]", {{"Result", 1}, "Content"}]]], "Output",
 CellChangeTimes->{3.8825478057731223`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"da31d6e4-252a-4811-a64c-fd0440099da0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p1", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ln", 
      RowBox[{"(", 
       RowBox[{"x", " ", "+", " ", "1"}], ")"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8825478224848332`*^9, 3.882547826137198*^9}, {
  3.882547868164832*^9, 3.882547881926411*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"5ebaabba-4d31-4aeb-a61d-526528aa30a4"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.8825478323244534`*^9, {3.8825478729492207`*^9, 3.8825478857141347`*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"a48a8523-0ab4-493c-b763-2b41cf628d10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Log", 
      RowBox[{"(", 
       RowBox[{"x", " ", "+", " ", "1"}], ")"}]}], ",", " ", 
     RowBox[{"x", " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"x", "/", "2"}], " ", "+", " ", "1"}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.882547899023962*^9, 3.8825480010613213`*^9}, {
  3.882548043320331*^9, 3.882548048172982*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"760d931d-7684-4a57-89eb-a1e325ba9d1e"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, {}, 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVkmk0FooahQ3fPI/4JEMfZShDyVDJi1AdmeMWIa7qIkQH4SANhBKpJJWQ
uZISKXmLFAnHUCFDOknpyGkyc7o/9trrWWuv59dW8Q5y9JWSkJCI/5X/9x8f
tn1dXBSj6vEAaQkJAoxEyfzomxPjxVBDzaZfbMsZnKyaFqPpsFxOuiQBlI2D
54O+iVGk1HtouTQBHielU4ZGxLhdO/KTA4kAFO1XivhCjJo/nn+sYhAg46DX
b3EXxXiP6Vf5SESAUsnQfAlDMUa7M0pe6ROA6Gu9WrRrGc4r9Y0WHiQA//WT
gNw0FVSeuj8WXkUAx/osH41mZWRZHqVTJIkQ9cUk4PQ7JYzeP3PihhsRqsOz
/G7aKWLVsbnasgdEsE3frrxwQQHlbhgVpxqQwPpSre3mz/LYcDLxfkE9CSZO
vpkjjMjjl738rL+ekCArZrbk0aA8VjRH/BA/I8FnT2Py+k55HLhWr17YQoL0
ZZV1q2rksd7BvbSumwQDhWW6/ER53GXgEr5ulARhFRd5A+JfviQzO28WGQqe
HnoZ6ibCrrdVN/s8yXBhdZhFsbMIJcOph+q8yZByKaR8YJsIaTXUhGu+ZAgJ
9U/aAiLUjXwRFeFPBhOlXRuV1ETIH3UQrAsnQ1cYFDSPyyEnWBiknUoGqeXk
MJV4OVS/laIxgWTwOJohbCuSRT8by9XJKynQavqTHJEri58YROzToYDprOuM
crYsimzYi9prKKAcsmQwJFUWVf5YdbnfmALDnrlFMmGyCOEjtW7WFNizvny9
h4UsMjPV4ga8KRD49fnuv/tl0Jd0SF02mwIxXtI36HwZlJMYWlwtR4XyNutT
XQwZbOR2jRkpUGF4Y0rgJZIMSp9J22euTAWrpUIdnRkhjmUGrfBSpwKrd3m5
41shJtfWmz01osJlp60VF24Kscn7s8nmnVSos0q7u8JGiPubzd4Z51Dha2X3
uQlLIcbpqTXfz6eCqpp8+D1TIZ52Lh0zK6ZConSe4W9rhEjrPfpzZwUV7PFO
daC8EB9+0OzGBioMGb+uqRwV4OSOeM3dn6ggsUqpzuKYACFKvHuZMQ2iZcw8
jsUI8E7j3h8FG2kwueg93xguQLsCPKy3iQbjHQXrt/oJkO+VWfwfOxr0RWhX
29v92jPebZ3wpcHdBpNbu0QCtDjv2bAtgwb73d3zwq/zcaCi7m/mTxqMWsaY
3yvgo42uJ3PPHA3+q5PzduYKH08RHE48kaLDTqm/lGLS+Rh9Lb8pi02HzUX+
2UfD+ViVM917RYMOqt8jz6aZ8THqZ5eisicdepMvJJR28/BkuyrDs50OnU+U
y7zaeLjJZm+s6Ss6tCwWtgubePj+eevUigE6PAy9K4p7wMOzt6MMuJ/pkOvW
Weqcx8OAQ7lBVhQG+Gkx2+eDeagkDOvfbM6A2eY4OXsGDy8ELQ9cWsuA7wSK
CZHEQ6cr1fkKTxgwvjF1d80iF/2Svo6pvWDAUMWlEtVvXGzvrJty6WdAQ1bN
hukeLt4WK6xau8CAFL/vXrmFXBT+dKn4ZsYEBdq+4u/mXKw0fLDI7WCCx8OW
lGUbuBjbStOwfsOEqyF6wfZruai+J/NA8ggTlvfNGJSt4KIzJe+D2SwTdMpO
NvgwuMi2WKbrp8YCc9vbgx3dHEwcrXj5NJoF/0tfEN7ax8GYkeGiFiM2lFn5
TA/s5uDk9a9HdCzZMD7z9A3DjYOUiPrzBQ5sCPFJy9u3jYPJ8tJ6HX5siNZX
1VNezUHZ4sePVC+zQfH6mUzFSTa2HpvTCiVwwH+tJrFPgY2HJy9GmURwIIR4
rzCMzcZrNiMJT2I5ENltvZUnxcb5Bi7RLYEDSb/7pm75wMIrprPDN85xoKQy
R1R9i4WdtgmwUMmBj2tltc9asfBqe/vorkkOTBAL2nWNWXjqsMTStkUOTHXr
h7ZosVBLPGNpT+ECJcyxWprLQt3UcyuPiLigfvekeUgfE50MmEHlG7iw14Dg
ahfMxED9Ngvn41wIJJ2Z/uTNRMfE0it9qVwIe6mSfXw7E2vmDyqFXeDC8TDT
t7XrmNjDdgh9X8aFgruR/iuJTHzvSZu73cWF9wb/xFKzGFhhYbR9szoPfAwH
iurr6ei34Xuj9Vse7CkydLGqouMfpfnTQ5954CdKk24qoaM+0UnyzBQPgmct
PFrT6PiPneuf5hw+RNcV83s86bjHTPpkL/Ahw/r3mPFZGlYl+AuMCvlwvrpV
68AXGlY0lNsk3OFDloZ6z7dhGh7e3cr68YgPOfS+NdNNNDwianm9qp8P19vg
o3QmDTmdzUnKQgE0ujKcRfo0NK0wPXYgWQBNz3wls1fQUHlix87BLAG0GNfd
UFxCw3TY4RhaIoCOJSFUVSkaBtctHWE3C2Bw8NVD7XYqaj9z69GiC2Fqb57G
pgAqBtQt+RR5Vgizr+deNnpS0ZRjuySjUAgLW1yObnGiImuL8Gn/PSEQVlIH
bddRMc+8/ipxUAjcicCMHRQqxrv599RqyYBmxLrFwHwKPs70MTzTJgPYb6v5
7hwFo58v9oyPyICLhc921xMUPNWz7XLGggzEs1JKTQMpmOztptKgLQs9+f2u
HCMKjiUINN+ky0Lin3Hlt56TcSR20/Gd/nKgaHi2T+0hGSNS9uwXJMrBnexi
UlY5GQfee51Yc00OhvZ2uMefJf/6q0JP8ZAcGC6IqU6eZDxjb3m60l0EqTvo
sRumSBil1KVn5SEP/wI/M5fs
       "]], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$64579#2"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-2.6010952655163857`, 6.592064646312674}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825480524674387`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"1346806e-4567-4a25-a8cf-25273581a6ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p1", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Log", 
      RowBox[{"(", 
       RowBox[{"x", " ", "+", " ", "1"}], ")"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.882548008898857*^9, 3.8825480108799562`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"a920db4b-f703-4335-a970-cb1edf231071"],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8825480148243136`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"0790158c-f082-4852-97ef-e9b1bc69add3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Plot[ln(1+ [x]), {x, -10, 10}]", 
   Typeset`newq$$ = "Plot[ln(1+ [x]), {x, -10, 10}]", Typeset`chosen$$ = 
   "Plot[Log[1 + x], {x, -10, 10}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{17.6, {6., 11.600000000000001`}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Plot[ln(1+ [x]), {x, -10, 10}]", 
                  Defer[
                   Plot[
                    Log[1 + $CellContext`x], {$CellContext`x, -10, 10}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Plot[ln(1+ [x]), {x, -10, 10}]", 
                    Defer[
                    Plot[
                    Log[1 + $CellContext`x], {$CellContext`x, -10, 10}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"1", " ", "+", " ", "x"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[48]:=",ExpressionUUID->"a38032de-32da-43ba-9eb8-8cfb9474c78b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
e8v8bJYpgaLHXcRyOYkKGeySETMC/QOcyIts
       "]]},
     Annotation[#, "Charting`Private`Tag$65430#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.5344530335220425`, 2.3978952356926184`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.882548080719285*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"7e10946c-68d7-4cce-a262-9ec4a5233a35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"p2", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", "/", 
      RowBox[{"(", 
       RowBox[{"1", " ", "+", " ", 
        RowBox[{"x", "/", "2"}]}], ")"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "2"}], ",", " ", "5"}], "}"}], ",", " ", 
    RowBox[{"PlotStyle", " ", "->", " ", "Magenta"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"ln", 
    RowBox[{"(", 
     RowBox[{"1", "+", " ", 
      RowBox[{"[", "x", "]"}]}], ")"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8825481239489775`*^9, 3.882548168566036*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[52]:=",ExpressionUUID->"bfb76d85-7b86-4fc4-8268-ce08fc706c66"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[1, 0, 1], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$66511#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 5}, {-5.305416721258662, 1.4285714169096206`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.882548132470967*^9, 3.8825481775350623`*^9}},
 CellLabel->"Out[52]=",ExpressionUUID->"81c276eb-54ab-4822-9d08-faaf5e034c7c"]
}, Open  ]]
},
WindowSize->{1080., 607.5},
WindowMargins->{{-4.875, Automatic}, {Automatic, -4.875}},
TaggingRules->Association["TryRealOnly" -> False],
Magnification:>1.6 Inherited,
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"445878d7-e582-46cd-b4f8-992a2b69ea99"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 13723, 336, 107, "WolframAlphaShortInput",ExpressionUUID->"7c3df53b-9c29-4850-9022-4a2d25310f46"],
Cell[14306, 360, 258, 6, 51, "Output",ExpressionUUID->"e2873e9b-3d39-4a9b-ae2f-453770221736"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14601, 371, 14210, 348, 107, "WolframAlphaShortInput",ExpressionUUID->"9063e0cc-cb7b-444c-8853-058b7b870bfd"],
Cell[28814, 721, 273, 7, 79, "Output",ExpressionUUID->"b3225cb5-e50b-4788-96a6-24e82bc45469"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29124, 733, 15557, 376, 107, "WolframAlphaShortInput",ExpressionUUID->"6bd2c19e-edaa-4cdc-aa27-ed4ddfb0c757"],
Cell[44684, 1111, 1524, 42, 383, "Output",ExpressionUUID->"5d84dcdb-6e09-4b29-953a-96f19cef64d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46245, 1158, 56519, 1079, 142, "WolframAlphaShortInput",ExpressionUUID->"c0e85298-15b4-4fc6-b4ca-900208dac8a2"],
Cell[102767, 2239, 1731, 45, 88, "Output",ExpressionUUID->"9e39c882-d344-4183-ab13-c6cd0a2ce282"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104535, 2289, 56273, 1073, 142, "WolframAlphaShortInput",ExpressionUUID->"1aeb1dc9-1516-4f68-856c-19bd13befd4b"],
Cell[160811, 3364, 1738, 46, 88, "Output",ExpressionUUID->"977e078d-0894-4f41-96fc-c4fdf3d66fa0"]
}, Open  ]],
Cell[162564, 3413, 2579, 72, 103, "WolframAlphaShortInput",ExpressionUUID->"5504a58b-a9bc-452d-97e7-7734b78c7567"],
Cell[CellGroupData[{
Cell[165168, 3489, 14636, 355, 107, "WolframAlphaShortInput",ExpressionUUID->"c7c4fb6b-9b91-4a81-8ce7-9eec4b13090d"],
Cell[179807, 3846, 4262, 88, 382, "Output",ExpressionUUID->"171e11eb-ab98-4163-b439-5fa9cb06569e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184106, 3939, 222, 5, 69, "Input",ExpressionUUID->"ec488e1c-c946-4bc5-b0b9-4a0789bb8d2b"],
Cell[184331, 3946, 4258, 89, 199, "Output",ExpressionUUID->"eebe09bf-9e58-413e-9b15-f55931299c88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188626, 4040, 15164, 368, 107, "WolframAlphaShortInput",ExpressionUUID->"6b62feca-4ed0-4d00-90ca-4dc1f2fc4b01"],
Cell[203793, 4410, 7887, 148, 382, "Output",ExpressionUUID->"27b3a8b1-b149-4b76-94df-961bc35bf428"]
}, Open  ]],
Cell[211695, 4561, 2580, 72, 103, "WolframAlphaShortInput",ExpressionUUID->"9a5de613-93a4-4196-a755-80b78dba9af1"],
Cell[CellGroupData[{
Cell[214300, 4637, 15175, 369, 107, "WolframAlphaShortInput",ExpressionUUID->"b67bcfe6-868f-4b81-a062-bc806c24c3ea"],
Cell[229478, 5008, 7887, 148, 382, "Output",ExpressionUUID->"0789eedc-6ce5-4560-b3dc-c3d844d70cdf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237402, 5161, 15176, 369, 107, "WolframAlphaShortInput",ExpressionUUID->"125cef4f-d7b6-4719-83a5-653ae9b2567f"],
Cell[252581, 5532, 7885, 148, 382, "Output",ExpressionUUID->"a37c5e6f-73af-4e37-941e-117c310f9834"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260503, 5685, 56265, 1071, 142, "WolframAlphaShortInput",ExpressionUUID->"55386cb0-977d-4f0a-b6f6-506a39729801"],
Cell[316771, 6758, 462, 13, 89, "Output",ExpressionUUID->"ee9252af-39b6-4705-91c7-6f86474be0e2"]
}, Open  ]],
Cell[317248, 6774, 2761, 76, 103, "WolframAlphaShortInput",ExpressionUUID->"43a4d478-dc0a-4db1-a6b9-ebf282bf039e"],
Cell[320012, 6852, 2577, 72, 103, "WolframAlphaShortInput",ExpressionUUID->"6b300d0a-92a6-49de-abc0-6339cba43b98"],
Cell[322592, 6926, 2580, 72, 103, "WolframAlphaShortInput",ExpressionUUID->"6eaa48e5-3270-45b3-a425-8a895d047493"],
Cell[325175, 7000, 2758, 76, 103, "WolframAlphaShortInput",ExpressionUUID->"a644f8a9-530b-4b3c-853d-26c741664b76"],
Cell[327936, 7078, 2755, 76, 103, "WolframAlphaShortInput",ExpressionUUID->"0dff8c4c-1abb-4a3d-8dec-9b5be7f6aee5"],
Cell[330694, 7156, 2741, 75, 103, "WolframAlphaShortInput",ExpressionUUID->"0154744b-f2a1-4077-ba21-4fa3a90beab2"],
Cell[333438, 7233, 2747, 75, 103, "WolframAlphaShortInput",ExpressionUUID->"4e7b475b-dab4-46b7-9883-2fb9162960fc"],
Cell[336188, 7310, 2741, 75, 103, "WolframAlphaShortInput",ExpressionUUID->"d1e97420-8286-44d1-b63b-c454e2a05f9b"],
Cell[CellGroupData[{
Cell[338954, 7389, 56495, 1083, 173, "WolframAlphaShortInput",ExpressionUUID->"a1570b18-a832-4dca-b00f-1526c04db5a9"],
Cell[395452, 8474, 7513, 142, 387, "Output",ExpressionUUID->"c2a1614e-adf5-4dd0-aa17-d136d0c597b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[403002, 8621, 56552, 1086, 173, "WolframAlphaShortInput",ExpressionUUID->"85f7c5bf-b8a2-4069-8df0-6ad33c03a950"],
Cell[459557, 9709, 7515, 142, 387, "Output",ExpressionUUID->"58838e4d-6969-4f38-aa50-fbe652630dad"]
}, Open  ]],
Cell[467087, 9854, 2755, 76, 103, "WolframAlphaShortInput",ExpressionUUID->"95e8f157-f94f-4835-89a9-a6e388312c5c"],
Cell[469845, 9932, 2747, 75, 103, "WolframAlphaShortInput",ExpressionUUID->"1521ed11-06bb-4fe7-9c49-6ffdff4118b6"],
Cell[472595, 10009, 152, 3, 45, "Input",ExpressionUUID->"12c27e2f-3a68-40c6-bdaf-967e42286d1d"],
Cell[CellGroupData[{
Cell[472772, 10016, 622, 16, 102, "Input",ExpressionUUID->"a59ddd6a-b3e2-44e5-8eeb-a21a8837fb65"],
Cell[473397, 10034, 7840, 148, 382, "Output",ExpressionUUID->"82ae0b1e-3ae1-4cd5-bd2c-13d108111fd6"]
}, Open  ]],
Cell[481252, 10185, 156, 3, 45, "Input",ExpressionUUID->"c371e44e-2b35-4650-87da-971c54273d60"],
Cell[CellGroupData[{
Cell[481433, 10192, 229, 4, 69, "Input",ExpressionUUID->"d7ccf508-90dd-4d94-b55b-01ef6d604570"],
Cell[481665, 10198, 1124, 21, 168, "Message",ExpressionUUID->"a2eec8da-6abf-40a1-9934-e2250d2b8fa4"],
Cell[482792, 10221, 7986, 150, 108, "Output",ExpressionUUID->"22e6fda7-f323-4ab7-84bb-e5afa072a051"]
}, Open  ]],
Cell[CellGroupData[{
Cell[490815, 10376, 440, 11, 69, "Input",ExpressionUUID->"71d7e1c2-1f1c-4c9e-ab05-0d0ee1d5e115"],
Cell[491258, 10389, 1523, 42, 382, "Output",ExpressionUUID->"9a655523-24b1-41f5-8f72-5bf810ebb515"]
}, Open  ]],
Cell[492796, 10434, 208, 4, 45, "Input",ExpressionUUID->"1d3345e5-8741-45e1-b5b8-918995e12c84"],
Cell[CellGroupData[{
Cell[493029, 10442, 231, 4, 69, "Input",ExpressionUUID->"fd60e5f1-26cf-48d6-a654-02fdfacd99ae"],
Cell[493263, 10448, 7868, 149, 385, "Output",ExpressionUUID->"1ff50ed2-9324-479c-9b47-163e9c3eb51c"]
}, Open  ]],
Cell[501146, 10600, 487, 13, 69, "Input",ExpressionUUID->"c714cccc-9932-4ac4-9e7f-d7043c347147"],
Cell[501636, 10615, 457, 12, 69, "Input",ExpressionUUID->"cba32068-dfbe-49b3-8d61-ee63b2dd3e95"],
Cell[CellGroupData[{
Cell[502118, 10631, 497, 13, 102, "Input",ExpressionUUID->"ff9b6a03-9363-49ee-a01f-d5a0de7d428d"],
Cell[502618, 10646, 1549, 42, 382, "Output",ExpressionUUID->"c29c5746-1140-49e6-a290-5f080a5ba7da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504204, 10693, 14637, 355, 107, "WolframAlphaShortInput",ExpressionUUID->"995c59c8-ef2f-413a-a792-e3af8aca6d05"],
Cell[518844, 11050, 4241, 88, 382, "Output",ExpressionUUID->"f1e7d812-585d-41ba-a1bf-b52f23aeaa60"]
}, Open  ]],
Cell[523100, 11141, 455, 12, 69, "Input",ExpressionUUID->"ea22b414-69b7-4765-b031-aefb463ae363"],
Cell[523558, 11155, 496, 13, 69, "Input",ExpressionUUID->"8b18d580-a079-455e-b1e2-bac63633f607"],
Cell[CellGroupData[{
Cell[524079, 11172, 229, 4, 69, "Input",ExpressionUUID->"65cb29b1-8657-490f-ac86-99d3d0f890fe"],
Cell[524311, 11178, 7825, 148, 382, "Output",ExpressionUUID->"299ad0b8-e6ef-440e-830e-06bfd709c45c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[532173, 11331, 632, 18, 102, "Input",ExpressionUUID->"30fb7a17-4ff7-41a0-968e-15592dad9fde"],
Cell[532808, 11351, 7865, 148, 382, "Output",ExpressionUUID->"ad4c63c6-bfa1-41fe-8a29-75a54b3d3959"]
}, Open  ]],
Cell[CellGroupData[{
Cell[540710, 11504, 436, 11, 69, "Input",ExpressionUUID->"2d00cdfa-1baa-437c-849f-75d20258ef77"],
Cell[541149, 11517, 1547, 42, 382, "Output",ExpressionUUID->"d4041899-4b8e-49a7-9148-ac78589d1b55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[542733, 11564, 112, 0, 49, "WolframAlphaShort",ExpressionUUID->"c7a606e4-4d5d-4be6-834e-1ad9cc4dfb3f"],
Cell[542848, 11566, 450, 12, 89, "Output",ExpressionUUID->"da31d6e4-252a-4811-a64c-fd0440099da0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543335, 11583, 518, 13, 69, "Input",ExpressionUUID->"5ebaabba-4d31-4aeb-a61d-526528aa30a4"],
Cell[543856, 11598, 1578, 43, 382, "Output",ExpressionUUID->"a48a8523-0ab4-493c-b763-2b41cf628d10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[545471, 11646, 640, 17, 69, "Input",ExpressionUUID->"760d931d-7684-4a57-89eb-a1e325ba9d1e"],
Cell[546114, 11665, 7865, 148, 382, "Output",ExpressionUUID->"1346806e-4567-4a25-a8cf-25273581a6ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554016, 11818, 470, 12, 69, "Input",ExpressionUUID->"a920db4b-f703-4335-a970-cb1edf231071"],
Cell[554489, 11832, 1525, 42, 382, "Output",ExpressionUUID->"0790158c-f082-4852-97ef-e9b1bc69add3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[556051, 11879, 14637, 355, 107, "WolframAlphaShortInput",ExpressionUUID->"a38032de-32da-43ba-9eb8-8cfb9474c78b"],
Cell[570691, 12236, 4239, 88, 382, "Output",ExpressionUUID->"7e10946c-68d7-4cce-a262-9ec4a5233a35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[574967, 12329, 887, 25, 125, "Input",ExpressionUUID->"bfb76d85-7b86-4fc4-8268-ce08fc706c66"],
Cell[575857, 12356, 4692, 96, 383, "Output",ExpressionUUID->"81c276eb-54ab-4822-9d08-faaf5e034c7c"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

